x.bar <- mean(x)
set.seed(2)
b0 <- 0; b1 <- 1; b2 <- .5
n <- 10
x <- rnorm(n)
EY <- b0 + b1*x + b2*x^2
sigma <- 1
e <- rnorm(n, sd=sigma)
y <- EY + e
# empty plot
plot(x, y, type="n", main="Linear regression example with quadratic expectation")
# true curve (unseen)
grid <- seq(min(x), max(x), length.out=100)
lines(grid, cbind(1, grid, grid^2) %*% c(b0, b1, b2), col="green", lty=2)
lines(grid, cbind(1, grid, grid^2) %*% c(b0, b1, b2), col="green", lty=2, lwd=4)
# expected values of response (unseen)
points(x, EY, col="green", cex=2); points(x, EY, col="green", cex=3)
# errors (unseen)
for(i in 1:n) {
lines(rep(x[i], 2), c(EY[i], y[i]), col="yellow")
}
# observed values of response (seen)
points(x, y, col="red", cex=2)
x.bar <- mean(x)
x2 <- x^2
x2.bar <- mean(x2)
X.tilde <- cbind(x - x.bar, x2 - x2.bar)
Sigma <- t(X.tilde) %*% X.tilde / n
SigmaXy <- t(X.tilde) %*% y / n
coef = solve(Sigma) %*% SigmaXy
# ...
x.bar <- mean(x)
x2 <- x^2
x2.bar <- mean(x2)
X.tilde <- cbind(x - x.bar, x2 - x2.bar)
Sigma <- t(X.tilde) %*% X.tilde / n
SigmaXy <- t(X.tilde) %*% y / n
coef = solve(Sigma) %*% SigmaXy
y.bar = mean(y)
# ...
# empty plot
plot(x, y, type="n", main="Linear regression example with quadratic expectation")
grid <- seq(min(x), max(x), length.out=100)
lines(grid, cbind(1, grid, grid^2) %*% c(b0, b1, b2), col="green", lty=2)
lines(grid, cbind(1, grid, grid^2) %*% c(b0, b1, b2), col="green", lty=2, lwd=4)
lines(grid,cbind(1,grid,grid^2) %*% c(y.bar,coef),col='purple')
# expected values of response (unseen)
points(x, EY, col="green", cex=2); points(x, EY, col="green", cex=3)
for(i in 1:n) {
lines(rep(x[i], 2), c(EY[i], y[i]), col="yellow")
}
points(x, y, col="red", cex=2)
x.bar <- mean(x)
x2 <- x^2
x2.bar <- mean(x2)
X.tilde <- cbind(x - x.bar, x2 - x2.bar)
Sigma <- t(X.tilde) %*% X.tilde / n
SigmaXy <- t(X.tilde) %*% y / n
coef = Sigma %*% SigmaXy
y.bar = mean(y)
# plot
plot(x, y, type="n", main="Linear regression example with quadratic expectation")
grid <- seq(min(x), max(x), length.out=100)
lines(grid, cbind(1, grid, grid^2) %*% c(b0, b1, b2), col="green", lty=2)
lines(grid, cbind(1, grid, grid^2) %*% c(b0, b1, b2), col="green", lty=2, lwd=4)
lines(grid,cbind(1,grid,grid^2) %*% c(y.bar,coef),col='purple')
# expected values of response (unseen)
points(x, EY, col="green", cex=2); points(x, EY, col="green", cex=3)
for(i in 1:n) {
lines(rep(x[i], 2), c(EY[i], y[i]), col="yellow")
}
points(x, y, col="red", cex=2)
Sigma
solve(Sigma)
print(solve(Sigma))
print(Sigma)
print(solve(Sigma))
Sigma %*% solve(Sigma)
x.bar <- mean(x)
x2 <- x^2
x2.bar <- mean(x2)
X.tilde <- cbind(x - x.bar, x2 - x2.bar)
Sigma <- t(X.tilde) %*% X.tilde / n
SigmaXy <- t(X.tilde) %*% y / n
coef = solve(Sigma) %*% SigmaXy
y.bar = mean(y)
# plot
plot(x, y, type="n", main="Linear regression example with quadratic expectation")
grid <- seq(min(x), max(x), length.out=100)
lines(grid, cbind(1, grid, grid^2) %*% c(b0, b1, b2), col="green", lty=2)
lines(grid, cbind(1, grid, grid^2) %*% c(b0, b1, b2), col="green", lty=2, lwd=4)
lines(grid,cbind(1,grid,grid^2) %*% c(y.bar,coef),col='purple')
# expected values of response (unseen)
points(x, EY, col="green", cex=2); points(x, EY, col="green", cex=3)
for(i in 1:n) {
lines(rep(x[i], 2), c(EY[i], y[i]), col="yellow")
}
points(x, y, col="red", cex=2)
svd(Sigma)
decop = svd(Sigma)
decop$u %*% diag(decop$d) %*% decop$v
decop = svd(Sigma)
decop$u %*% diag(decop$d) %*% decop$v
solve(Sigma)
decop = svd(Sigma)
decop$u %*% diag(1/decop$d) %*% decop$v
solve(Sigma)
x.bar <- mean(x)
x2 <- x^2
x2.bar <- mean(x2)
X.tilde <- cbind(x - x.bar, x2 - x2.bar)
Sigma <- t(X.tilde) %*% X.tilde / n
SigmaXy <- t(X.tilde) %*% y / n
decop = svd(Sigma)
Sigma_inv = decop$u %*% diag(1/decop$d) %*% decop$v
coef = Sigma_inv %*% SigmaXy
y.bar = mean(y)
# plot
plot(x, y, type="n", main="Linear regression example with quadratic expectation")
grid <- seq(min(x), max(x), length.out=100)
lines(grid, cbind(1, grid, grid^2) %*% c(b0, b1, b2), col="green", lty=2)
lines(grid, cbind(1, grid, grid^2) %*% c(b0, b1, b2), col="green", lty=2, lwd=4)
lines(grid,cbind(grid,grid^2) %*% coef,col='purple')
# expected values of response (unseen)
points(x, EY, col="green", cex=2); points(x, EY, col="green", cex=3)
for(i in 1:n) {
lines(rep(x[i], 2), c(EY[i], y[i]), col="yellow")
}
points(x, y, col="red", cex=2)
x.bar <- mean(x)
x2 <- x^2
x2.bar <- mean(x2)
X.tilde <- cbind(x - x.bar, x2 - x2.bar)
Sigma <- t(X.tilde) %*% X.tilde / n
SigmaXy <- t(X.tilde) %*% y / n
decop = svd(Sigma)
Sigma_inv = decop$u %*% diag(1/decop$d) %*% decop$v
coef = Sigma_inv %*% SigmaXy
y.bar = mean(y)
# plot
plot(x, y, type="n", main="Linear regression example with quadratic expectation")
grid <- seq(min(x), max(x), length.out=100)
lines(grid, cbind(1, grid, grid^2) %*% c(b0, b1, b2), col="green", lty=2)
lines(grid, cbind(1, grid, grid^2) %*% c(b0, b1, b2), col="green", lty=2, lwd=4)
lines(grid,cbind(1,grid,grid^2) %*% c(y.bar,coef),col='purple')
# expected values of response (unseen)
points(x, EY, col="green", cex=2); points(x, EY, col="green", cex=3)
for(i in 1:n) {
lines(rep(x[i], 2), c(EY[i], y[i]), col="yellow")
}
points(x, y, col="red", cex=2)
c(y.bar,coef)
V = cbind(1,x,x2)
View(V)
print(c(y.bar,coef))
V = cbind(1,x,x2)
b = solve(t(V) %*% V) %*% t(V) %*% y
print(b)
mean(y)
y
mean(y)
print(c(y.bar,coef))
V = cbind(1,x,x2)
b = solve(t(V) %*% V) %*% t(V) %*% y
print(b)
mean(y)
x.bar <- mean(x)
x2 <- x^2
x2.bar <- mean(x2)
X.tilde <- cbind(x - x.bar, x2 - x2.bar)
Sigma <- t(X.tilde) %*% X.tilde / n
SigmaXy <- t(X.tilde) %*% y / n
decop = svd(Sigma)
Sigma_inv = decop$u %*% diag(1/decop$d) %*% decop$v
coef = Sigma_inv %*% SigmaXy
y.bar = mean(y)
# plot
plot(x, y, type="n", main="Linear regression example with quadratic expectation")
grid <- seq(min(x), max(x), length.out=100)
lines(grid, cbind(1, grid, grid^2) %*% c(b0, b1, b2), col="green", lty=2)
lines(grid, cbind(1, grid, grid^2) %*% c(b0, b1, b2), col="green", lty=2, lwd=4)
lines(grid,cbind(1,grid,grid^2) %*% c(0.224,coef),col='purple')
# expected values of response (unseen)
points(x, EY, col="green", cex=2); points(x, EY, col="green", cex=3)
for(i in 1:n) {
lines(rep(x[i], 2), c(EY[i], y[i]), col="yellow")
}
points(x, y, col="red", cex=2)
x.bar <- mean(x)
x2 <- x^2
x2.bar <- mean(x2)
X.tilde <- cbind(x - x.bar, x2 - x2.bar)
Sigma <- t(X.tilde) %*% X.tilde / n
SigmaXy <- t(X.tilde) %*% y / n
decop = svd(Sigma)
Sigma_inv = decop$u %*% diag(1/decop$d) %*% decop$v
coef = Sigma_inv %*% SigmaXy
y.bar = mean(y)
# plot
plot(x, y, type="n", main="Linear regression example with quadratic expectation")
grid <- seq(min(x), max(x), length.out=100)
lines(grid, cbind(1, grid, grid^2) %*% c(b0, b1, b2), col="green", lty=2)
lines(grid, cbind(1, grid, grid^2) %*% c(b0, b1, b2), col="green", lty=2, lwd=4)
lines(grid,cbind(1,grid,grid^2) %*% c(0.224,coef),col='purple')
curve(y.bar + coef[1]*(x - x.bar) + coef[2]*(x2 - x2.bar),col='black',add=TRUE)
# expected values of response (unseen)
points(x, EY, col="green", cex=2); points(x, EY, col="green", cex=3)
for(i in 1:n) {
lines(rep(x[i], 2), c(EY[i], y[i]), col="yellow")
}
points(x, y, col="red", cex=2)
x.bar <- mean(x)
x2 <- x^2
x2.bar <- mean(x2)
X.tilde <- cbind(x - x.bar, x2 - x2.bar)
Sigma <- t(X.tilde) %*% X.tilde / n
SigmaXy <- t(X.tilde) %*% y / n
decop = svd(Sigma)
Sigma_inv = decop$u %*% diag(1/decop$d) %*% decop$v
coef = Sigma_inv %*% SigmaXy
y.bar = mean(y)
# plot
plot(x, y, type="n", main="Linear regression example with quadratic expectation")
grid <- seq(min(x), max(x), length.out=100)
lines(grid, cbind(1, grid, grid^2) %*% c(b0, b1, b2), col="green", lty=2)
lines(grid, cbind(1, grid, grid^2) %*% c(b0, b1, b2), col="green", lty=2, lwd=4)
curve(y.bar + coef[1]*(x - x.bar) + coef[2]*(x2 - x2.bar),col='black',add=TRUE)
# expected values of response (unseen)
points(x, EY, col="green", cex=2); points(x, EY, col="green", cex=3)
for(i in 1:n) {
lines(rep(x[i], 2), c(EY[i], y[i]), col="yellow")
}
points(x, y, col="red", cex=2)
x.bar <- mean(x)
x2 <- x^2
x2.bar <- mean(x2)
X.tilde <- cbind(x - x.bar, x2 - x2.bar)
Sigma <- t(X.tilde) %*% X.tilde / n
SigmaXy <- t(X.tilde) %*% y / n
decop = svd(Sigma)
Sigma_inv = decop$u %*% diag(1/decop$d) %*% decop$v
coef = Sigma_inv %*% SigmaXy
y.bar = mean(y)
# plot
plot(x, y, type="n", main="Linear regression example with quadratic expectation")
grid <- seq(min(x), max(x), length.out=100)
lines(grid, cbind(1, grid, grid^2) %*% c(b0, b1, b2), col="green", lty=2)
lines(grid, cbind(1, grid, grid^2) %*% c(b0, b1, b2), col="green", lty=2, lwd=4)
lines(grid, cbind(1, grid, grid^2) %*% c(y.bar,coef), col="purple")
# expected values of response (unseen)
points(x, EY, col="green", cex=2); points(x, EY, col="green", cex=3)
for(i in 1:n) {
lines(rep(x[i], 2), c(EY[i], y[i]), col="yellow")
}
points(x, y, col="red", cex=2)
View(X.tilde)
x.bar
x
x2
x.bar <- mean(x)
x2 <- x^2
x2.bar <- mean(x2)
X.tilde <- cbind(x - x.bar, x2 - x2.bar)
Sigma <- t(X.tilde) %*% X.tilde / n
SigmaXy <- t(X.tilde) %*% y / n
decop = svd(Sigma)
Sigma_inv = decop$u %*% diag(1/decop$d) %*% decop$v
coef = Sigma_inv %*% SigmaXy
y.bar = mean(y)
# plot
plot(x, y, type="n", main="Linear regression example with quadratic expectation")
grid <- seq(min(x), max(x), length.out=100)
lines(grid, cbind(1, grid, grid^2) %*% c(b0, b1, b2), col="green", lty=2)
lines(grid, cbind(1, grid, grid^2) %*% c(b0, b1, b2), col="green", lty=2, lwd=4)
curve(y.bar + coef[1]*(x - x.bar) + coef[2]*(x2 - x2.bar),col = 'purple')
# expected values of response (unseen)
points(x, EY, col="green", cex=2); points(x, EY, col="green", cex=3)
for(i in 1:n) {
lines(rep(x[i], 2), c(EY[i], y[i]), col="yellow")
}
points(x, y, col="red", cex=2)
y.bar + coef[1]*(x - x.bar) + coef[2]*(x2 - x2.bar)
y.bar + X.tilde %*% coef
x.bar <- mean(x)
x2 <- x^2
x2.bar <- mean(x2)
X.tilde <- cbind(x - x.bar, x2 - x2.bar)
Sigma <- t(X.tilde) %*% X.tilde / n
SigmaXy <- t(X.tilde) %*% y / n
decop = svd(Sigma)
Sigma_inv = decop$u %*% diag(1/decop$d) %*% decop$v
coef = Sigma_inv %*% SigmaXy
y.bar = mean(y)
# plot
plot(x, y, type="n", main="Linear regression example with quadratic expectation")
grid <- seq(min(x), max(x), length.out=100)
lines(grid, cbind(1, grid, grid^2) %*% c(b0, b1, b2), col="green", lty=2)
lines(grid, cbind(1, grid, grid^2) %*% c(b0, b1, b2), col="green", lty=2, lwd=4)
lines(grid,cbind(1,(grid - x.bar),(grid^2 - x2.bar)) %*% c(y.bar,coef),col = 'purple')
# expected values of response (unseen)
points(x, EY, col="green", cex=2); points(x, EY, col="green", cex=3)
for(i in 1:n) {
lines(rep(x[i], 2), c(EY[i], y[i]), col="yellow")
}
points(x, y, col="red", cex=2)
x.bar <- mean(x)
x2 <- x^2
x2.bar <- mean(x2)
X.tilde <- cbind(x - x.bar, x2 - x2.bar)
Sigma <- t(X.tilde) %*% X.tilde / n
SigmaXy <- t(X.tilde) %*% y / n
decop = svd(Sigma)
Sigma_inv = decop$u %*% diag(1/decop$d) %*% decop$v
coef = Sigma_inv %*% SigmaXy
y.bar = mean(y)
# plot
plot(x, y, type="n", main="Linear regression example with quadratic expectation")
grid <- seq(min(x), max(x), length.out=100)
lines(grid, cbind(1, grid, grid^2) %*% c(b0, b1, b2), col="green", lty=2)
lines(grid, cbind(1, grid, grid^2) %*% c(b0, b1, b2), col="green", lty=2, lwd=4)
lines(grid,cbind(1,(grid - x.bar),(grid^2 - x2.bar)) %*% c(y.bar,coef),col = 'purple')
# expected values of response (unseen)
points(x, EY, col="green", cex=2); points(x, EY, col="green", cex=3)
for(i in 1:n) {
lines(rep(x[i], 2), c(EY[i], y[i]), col="yellow")
}
points(x, y, col="red", cex=2)
nsim <- 200
B <- matrix(0, nrow=nsim, ncol=2)
for(i in 1:nsim) {
y <- b0 + b1*x + b2*x^2 + rnorm(n, sd=sigma)
SigmaXy <- t(X.tilde) %*% y / n
coef = Sigma_inv %*% SigmaXy
B[i,] = coef
}
View(B)
mu <- c(b1,b2)
C = ((sigma^2)/n) %*% Sigma_inv
mu <- c(b1,b2)
C = ((sigma^2)/n) * Sigma_inv
print(mu)
print(C)
plot(B, xlab=expression(beta[1]), ylab=expression(beta[2]), main="Simulated least-squares coefficient estimates")
library(mixtools)
# ...
plot(B, xlab=expression(beta[1]), ylab=expression(beta[2]), main="Simulated least-squares coefficient estimates")
library(mixtools)
point(mean(B[1,],mean[B[2,]]),col='red')
plot(B, xlab=expression(beta[1]), ylab=expression(beta[2]), main="Simulated least-squares coefficient estimates")
library(mixtools)
points(mean(B[1,],mean[B[2,]]),col='red',pch="*", cex=3)
plot(B, xlab=expression(beta[1]), ylab=expression(beta[2]), main="Simulated least-squares coefficient estimates")
library(mixtools)
points(mean(B[1,],mean(B[2,]),col='red',pch="*", cex=3)
# ...
plot(B, xlab=expression(beta[1]), ylab=expression(beta[2]), main="Simulated least-squares coefficient estimates")
library(mixtools)
points(mean(B[,1]),mean(B[,2]),col='red',pch="*", cex=3)
# ...
plot(B, xlab=expression(beta[1]), ylab=expression(beta[2]), main="Simulated least-squares coefficient estimates")
library(mixtools)
muem = c(mean(B[,1]),mean(B[,2]))
points(muem,col='red',pch="*", cex=3)
# ...
muem
plot(B, xlab=expression(beta[1]), ylab=expression(beta[2]), main="Simulated least-squares coefficient estimates")
library(mixtools)
muem = c(mean(B[,1]),mean(B[,2]))
points(muem,col='red',pch="*", cex=3)
# ...
muem
plot(B, xlab=expression(beta[1]), ylab=expression(beta[2]), main="Simulated least-squares coefficient estimates")
library(mixtools)
muem = c(mean(B[,1]),mean(B[,2]))
points(mean(B[,1]),mean(B[,2]),col='red',pch="*", cex=3)
# ...
muem
cov(B)
plot(B, xlab=expression(beta[1]), ylab=expression(beta[2]), main="Simulated least-squares coefficient estimates")
library(mixtools)
muem = c(mean(B[,1]),mean(B[,2]))
points(mean(B[,1]),mean(B[,2]),col='red',pch="*", cex=3)
Cem = cov(B)
ellipse(muem, Cem, col="red", alpha=.25)
# ...
plot(B, xlab=expression(beta[1]), ylab=expression(beta[2]), main="Simulated least-squares coefficient estimates")
library(mixtools)
muem = c(mean(B[,1]),mean(B[,2]))
points(mean(B[,1]),mean(B[,2]),col='red',pch="*", cex=3)
Cem = cov(B)
ellipse(muem, Cem, col="red", alpha=.25)
mu = c(1,0.5)
points(1,0.5,col='green',pch="*", cex=3)
ellipse(mu, C, col="green", alpha=.25)
setwd('/Users/bo/Desktop/2020 fall/Computational/homework-1/bis557')
library(devtools)
build_vignettes()
