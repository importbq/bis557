for (i in 1:99){
for (j in length(lst1[[i]])){
lst1[[i]][j] = update(lst1[[i]][j])
}
}
lst1[[1]]
lst1[[2]]
lst1[[3]]
lst1[[4]]
lst1[[5]]
lst1[[6]]
length(lst1[[3]])
length(lst1[[4]])
lst1 = lst
for (i in 1:99){
for (j in (1:length(lst1[[i]]))){
lst1[[i]][j] = update(lst1[[i]][j])
}
}
lst1
lapply(lst1, sum)
sapply(lapply(lst1, sum),sum)
sum(sapply(lapply(lst1, sum),sum))
sapply(lst1,sum)
100*100
M = matrix(rep(0,10000),row=100)
?matrox
?matrix
M = matrix(rep(0,10000),nrow=100)
M[1,1]
M[2,1]
M[2,1:2]
M = sapply(M,update)
M
for (i in 1:100){
for (j in 1:100){
M[j,i] = M[i,j]
}
M[i,i] = 0
}
M[100,100]
M
M = matrix(sapply(M,update),nrow = 100)
M = matrix(rep(0,10000),nrow=100)
M = matrix(sapply(M,update),nrow = 100)
M
for (i in 1:100){
for (j in 1:100){
M[j,i] = M[i,j]
}
M[i,i] = 0
}
M
sum(M)
M = matrix(rep(0,10000),nrow=100)
M = matrix(sapply(M,update),nrow = 100)
for (i in 1:100){
for (j in 1:100){
M[j,i] = M[i,j]
}
M[i,i] = 0
}
sum(M)
update = function(x){
if (x == 0) {
u = runif(1)
if (u <= 0.4){
x = 1
}
}
else{
u = runif(1)
if (u <= 0.6){
x = 0
}
}
return(x)
}
M = matrix(rep(0,10000),nrow=100)
M = matrix(sapply(M,update),nrow = 100)
for (i in 1:100){
for (j in 1:100){
M[j,i] = M[i,j]
}
M[i,i] = 0
}
sum(M)
tr(M)
trace(M)
Gn = function(M){
M = matrix(sapply(M,update),nrow = 100)
for (i in 1:100){
for (j in 1:100){
M[j,i] = M[i,j]
}
M[i,i] = 0
}
En = sum(M)/2
Tn = sum(diag(M %*% M %*% M))
return(c(En,Tn))
}
M = matrix(rep(0,10000),nrow=100)
Gn(M)
M = matrix(rep(0,10000),nrow=100)
M = matrix(sapply(M,update),nrow = 100)
for (i in 1:100){
for (j in 1:100){
M[j,i] = M[i,j]
}
M[i,i] = 0
}
En = sum(M)/2
Tn = sum(diag(M %*% M %*% M))
M = matrix(rep(0,10000),nrow=100)
Gn = function(M){
M = matrix(sapply(M,update),nrow = 100)
for (i in 1:100){
for (j in 1:100){
M[j,i] = M[i,j]
}
M[i,i] = 0
}
En = sum(M)/2
Tn = sum(diag(M %*% M %*% M))/6
return(c(En,Tn))
}
Gn(M)
M = matrix(rep(0,10000),nrow=100)
M = matrix(sapply(M,update),nrow = 100)
for (i in 1:100){
for (j in 1:100){
M[j,i] = M[i,j]
}
M[i,i] = 0
}
M
M = matrix(rep(0,100),nrow=100)
M = matrix(sapply(M,update),nrow = 10)
for (i in 1:10){
for (j in 1:10){
M[j,i] = M[i,j]
}
M[i,i] = 0
}
M
M %*% M %*% M
diag(M %*% M %*% M)
sum(diag(M %*% M %*% M))/6
M = matrix(rep(0,10000),nrow=100)
M = matrix(sapply(M,update),nrow = 100)
sum(M)
for (i in 1:10){
for (j in 1:10){
M[j,i] = M[i,j]
}
M[i,i] = 0
}
sum(M)
diag(M %*% M %*% M)
sum(diag(M %*% M %*% M))/6
sum(diag(M %*% M %*% M))
k =svd(M %*% M %*% M)
sum(k$d)
M = matrix(rep(0,10000),nrow=100)
M = matrix(sapply(M,update),nrow = 100)
for (i in 1:10){
for (j in 1:10){
M[j,i] = M[i,j]
}
M[i,i] = 0
}
M %*% M %*% M
M
Tn = sum(diag(M %*% (M %*% M)))/6
Tn = sum(diag((M %*% (M %*% M)))
Tn = sum(diag((M %*% (M %*% M))))
Tn = sum(diag((M %*% (M %*% M))))
?optim
M = matrix(rep(0,10000),nrow=100)
M = matrix(sapply(M,update),nrow = 100)
for (i in 1:10){
for (j in 1:10){
M[j,i] = M[i,j] #make sure it is diagonal
}
M[i,i] = 0 #make sure it is 0 on the diagonal
}
En = sum(M)/2
Tn = sum(diag(M %*% M %*% M))/6
Gn = function(M){
M = matrix(sapply(M,update),nrow = 100)
for (i in 1:10){
for (j in 1:10){
M[j,i] = M[i,j] #make sure it is diagonal
}
M[i,i] = 0 #make sure it is 0 on the diagonal
}
En = sum(M)/2
Tn = round(sum(diag(M %*% M %*% M))/6)
return(c(M,En,Tn))
}
Gn = function(M){
M = matrix(sapply(M,update),nrow = 100)
for (i in 1:10){
for (j in 1:10){
M[j,i] = M[i,j] #make sure it is diagonal
}
M[i,i] = 0 #make sure it is 0 on the diagonal
}
En = sum(M)/2
Tn = round(sum(diag(M %*% M %*% M))/6)
return(c(M,En,Tn))
}
En = numeric(0)
Tn = numeric(0)
M = matrix(rep(0,10000),nrow=100)
for (i in 1:100){
results = Gn(M)
M = results[1]
En = results[2]
Tn = results[3]
}
Gn = function(M){
M = matrix(sapply(M,update),nrow = 100)
for (i in 1:100){
for (j in 1:100){
M[j,i] = M[i,j] #make sure it is diagonal
}
M[i,i] = 0 #make sure it is 0 on the diagonal
}
En = sum(M)/2
Tn = round(sum(diag(M %*% M %*% M))/6)
return(c(M,En,Tn))
}
M = matrix(rep(0,10000),nrow=100)
Gn(M)
a = Gn(M)
a[2]
a[3]
Gn = function(M){
M = matrix(sapply(M,update),nrow = 100)
for (i in 1:100){
for (j in 1:100){
M[j,i] = M[i,j] #make sure it is diagonal
}
M[i,i] = 0 #make sure it is 0 on the diagonal
}
En = sum(M)/2
Tn = round(sum(diag(M %*% M %*% M))/6)
return(list(M,En,Tn))
}
Gn(M)
Gn = function(M){
M = matrix(sapply(M,update),nrow = 100)
for (i in 1:100){
for (j in 1:100){
M[j,i] = M[i,j] #make sure it is diagonal
}
M[i,i] = 0 #make sure it is 0 on the diagonal
}
En = sum(M)/2
Tn = sum(diag(M %*% M %*% M))/6
return(list(M,En,Tn))
}
Gn(M)
En = numeric(0)
Tn = numeric(0)
M = matrix(rep(0,10000),nrow=100)
for (i in 1:100){
results = Gn(M)
M = results[1]
En[i] = results[2]
Tn[i] = results[3]
}
View(Tn)
View(results)
View(Tn)
En
M
dim(M)
class(M)
unlist(M)
class(unlist(M))
matrix(M)
matrix(unlist(M),nrow = 100)
En = numeric(0)
Tn = numeric(0)
M = matrix(rep(0,10000),nrow=100)
for (i in 1:100){
results = Gn(M)
M = results[1]
M = matrix(unlist(M),nrow = 100)
En[i] = results[2]
Tn[i] = results[3]
}
print(En)
pirnt(Tn)
En = numeric(0)
Tn = numeric(0)
M = matrix(rep(0,10000),nrow=100)
for (i in 1:100){
results = Gn(M)
M = results[1]
M = matrix(unlist(M),nrow = 100)
En[i] = unlist(results[2])
Tn[i] = unlist(results[3])
}
print(En)
pirnt(Tn)
print(Tn)
print(En)
print(Tn)
#extend the simulation to n = 10^4
En = numeric(0)
Tn = numeric(0)
M = matrix(rep(0,10000),nrow=100)
for (i in 1:(10^4)){
results = Gn(M)
M = results[1]
M = matrix(unlist(M),nrow = 100)
En[i] = unlist(results[2])
Tn[i] = unlist(results[3])
}
hist(En)
hist(Tn)
hist(En,breaks = 100)
hist(Tn,breaks = 100)
arr1 %>%
as_tibble() %>%
ggplot(aes(value)) +
geom_histogram(stat = 'density')
arr1 %>%
as_tibble() %>%
ggplot(aes(value)) +
geom_hline(yintercept=0.75)
arr1 %>%
as_tibble() %>%
ggplot(aes(value)) +
geom_vline(aes(xintercept = arr1))
lbd <- function(t,alpha = 0.1,beta = 1, arrivals = arrivals){
result = 1 + alpha*sum(exp(-beta*(t - arrivals[arrivals < t])))
return(result)
}
x = seq(0,20,by=0.01)
y = sapply(x,function(x){lbd(x,arrivals = arr1)})
lines(x,y)
x = seq(0,20,by=0.01)
y = sapply(x,function(x){lbd(x,arrivals = arr1)})
plot(x,y)
arr1 %>%
as_tibble() %>%
ggplot(aes(value)) +
geom_vline(aes(xintercept = arr1)) +
geom_line(aes(x,y),color='red')
arr1 %>%
as_tibble() %>%
ggplot(aes(value)) +
geom_vline(aes(xintercept = arr1)) +
geom_line(aes(y),color='red')
df = cbind(x,y)
View(df)
df = as.data.frame(cbind(x,y),row.names = c('x','y'))
View(df)
arr1 %>%
as_tibble() %>%
ggplot(aes(value)) +
geom_vline(aes(xintercept = arr1)) +
geom_line(data = df, aes(x,y),color='red')
arr1 %>%
as_tibble() %>%
ggplot(aes(value)) +
geom_vline(aes(xintercept = arr1)) +
geom_line(data = df, aes(x,y),color='red') +
ggtitle('Harkes Process with alpha < beta')
arr2 = simulate_hawkes(alpha = 0.5,beta=0.4)
arr2 = simulate_hawkes(alpha = 0.5,beta=0.3)
lbd <- function(t,alpha = 0.5,beta = 0.4, arrivals = arrivals){
result = 1 + alpha*sum(exp(-beta*(t - arrivals[arrivals < t])))
return(result)
}
x = seq(0,20,by=0.01)
y = sapply(x,function(x){lbd(x,arrivals = arr2)})
df = as.data.frame(cbind(x,y),row.names = c('x','y'))
arr2 = simulate_hawkes(alpha = 0.1,beta=1)
arr2 %>%
as_tibble() %>%
ggplot(aes(value)) +
geom_vline(aes(xintercept = arr2)) +
geom_line(data = df, aes(x,y),color='red') +
ggtitle('Harkes Process with alpha < beta')
arr2 = simulate_hawkes(alpha = 0.5,beta=0.3)
lbd <- function(t,alpha = 0.5,beta = 0.3, arrivals = arrivals){
result = 1 + alpha*sum(exp(-beta*(t - arrivals[arrivals < t])))
return(result)
}
x = seq(0,20,by=0.01)
y = sapply(x,function(x){lbd(x,arrivals = arr2)})
df = as.data.frame(cbind(x,y),row.names = c('x','y'))
arr2 = simulate_hawkes(alpha = 0.1,beta=1)
arr2 %>%
as_tibble() %>%
ggplot(aes(value)) +
geom_vline(aes(xintercept = arr2)) +
geom_line(data = df, aes(x,y),color='red') +
ggtitle('Harkes Process with alpha < beta')
set.seed(100)
arr2 = simulate_hawkes(alpha = 0.5,beta=0.3)
lbd <- function(t,alpha = 0.5,beta = 0.3, arrivals = arrivals){
result = 1 + alpha*sum(exp(-beta*(t - arrivals[arrivals < t])))
return(result)
}
x = seq(0,20,by=0.01)
y = sapply(x,function(x){lbd(x,arrivals = arr2)})
df = as.data.frame(cbind(x,y),row.names = c('x','y'))
arr2 = simulate_hawkes(alpha = 0.1,beta=1)
arr2 %>%
as_tibble() %>%
ggplot(aes(value)) +
geom_vline(aes(xintercept = arr2)) +
geom_line(data = df, aes(x,y),color='red') +
ggtitle('Harkes Process with alpha > beta')
library(dplyr)
library(ggplot2)
# we set the first one to be from exponential distribution with lambda = 1, alpha = 0.5, beta = 0.8;
simulate_hawkes = function(lambda0 = 1, alpha = 0.5, beta = 0.9, t_max=20){
arrivals = numeric()
s = 0
t = 0
lambda_star = lambda0
s = s - log(runif(1))/lambda_star
t = s
dlambda = alpha
arrivals = c(arrivals,t)
while(s < t_max){
U = runif(1)
s = s - log(U)/lambda_star
u = runif(1)
if (u <= lambda0 + dlambda*exp(-beta*(s-t))/lambda_star){
dlambda = alpha + dlambda*exp(-beta*(s-t))
lambda_star = lambda_star + alpha
t = s
arrivals = c(arrivals,t)
}
}
return(arrivals)
}
set.seed(100)
lbd <- function(t,alpha = 0.1,beta = 1, arrivals = arrivals){
result = 1 + alpha*sum(exp(-beta*(t - arrivals[arrivals < t])))
return(result)
}
x = seq(0,20,by=0.01)
y = sapply(x,function(x){lbd(x,arrivals = arr1)})
df = as.data.frame(cbind(x,y),row.names = c('x','y'))
arr1 = simulate_hawkes(alpha = 0.1,beta=1)
hist(arr1,breaks=100)
arr1 %>%
as_tibble() %>%
ggplot(aes(value)) +
geom_vline(aes(xintercept = arr1)) +
geom_line(data = df, aes(x,y),color='red') +
ggtitle('Harkes Process with alpha < beta')
library(jpeg)
readJPEG('/Users/bo/Desktop/2020 fall/Stochastic/HW2/IMG_1022.jpg')
setwd('/Users/bo/Desktop/2020 fall/Computational/homework-1/bis557')
library(devtools)
library(covr)
report()
test()
folds
test()
document()
report()
test()
set.seed(100)
ogd = data.frame(red = runif(100,0,1), yellow = runif(100,0,1),blue=runif(100,0,1))
ogd$price = 0.2*ogd$red + (0.4*(ogd$yellow **2)) + 0.5 * ogd$blue
formula = price ~ .
data = ogd
folds = vfold_cv(data, v=10)
View(folds)
error = function(x,x_pred){
return(mean((x - x_pred)^2))
}
#create folds using rsample:
maxc = 1+ (length(testing(folds$splits[[2]])))
document()
load_all()
test()
report()
test()
report()
load_all()
report()
package_coverage()
ogd = data.frame(red = runif(100,0,1), yellow = runif(100,0,1),blue=runif(100,0,1))
ogd$price = 0.2*ogd$red + (0.4*(ogd$yellow **2)) + 0.5 * ogd$blue
formula = price ~ .
err2= out_gradient_descent(formula,data)[1]
set.seed(100)
ogd = data.frame(red = runif(100,0,1), yellow = runif(100,0,1),blue=runif(100,0,1))
ogd$price = 0.2*ogd$red + (0.4*(ogd$yellow **2)) + 0.5 * ogd$blue
formula = price ~ .
err2= out_gradient_descent(formula,data)[1]
document()
report()
report()
err= out_gradient_descent(formula,ogd)
View(ogd)
?assessment
assessment(folds$splits[[1]])
assessment(folds$splits[[1]])
class(assessment(folds$splits[[1]]))
